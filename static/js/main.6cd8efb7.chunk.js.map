{"version":3,"sources":["api/users.ts","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","TodoInfo","todo","completed","title","user","className","cn","href","TodoList","todos","map","getUser","userId","usersFromServer","find","App","useState","setUserId","setTitle","currentTodos","setCurrentTodos","isUserSelected","setIsUserSelected","isTitleEntered","setIsTitleEntered","newId","Date","now","action","method","onSubmit","event","preventDefault","trim","newTodo","addTodo","htmlFor","type","value","onChange","target","placeholder","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6cd8efb7.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport cn from 'classnames';\n\nimport './todoinfo.scss';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    completed,\n    title,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={todo.id}\n      className={cn(\n        'TodoInfo',\n        {\n          'TodoInfo--completed': completed,\n        },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && (\n        <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n          {user.name}\n        </a>\n      )}\n    </article>\n  );\n};\n","import React from 'react';\n\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo key={todo.id} todo={todo} />\n    ))}\n  </section>\n);\n","import React, { useState } from 'react';\n\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\n\nimport { TodoList } from './components/TodoList';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nexport const todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App = () => {\n  const [userId, setUserId] = useState(0);\n  const [title, setTitle] = useState('');\n  const [currentTodos, setCurrentTodos] = useState(todos);\n  const [isUserSelected, setIsUserSelected] = useState(true);\n  const [isTitleEntered, setIsTitleEntered] = useState(true);\n\n  const newId = Date.now();\n\n  function addTodo(id: number) {\n    if (getUser(id) && title.trim()) {\n      const newTodo = {\n        id: newId,\n        userId,\n        title,\n        completed: false,\n        user: getUser(userId),\n      };\n\n      setUserId(0);\n      setTitle('');\n      setCurrentTodos([...currentTodos, newTodo]);\n    }\n\n    if (!userId) {\n      setUserId(0);\n      setIsUserSelected(false);\n    }\n\n    if (!title.trim()) {\n      setIsTitleEntered(false);\n    }\n  }\n\n  function handleFormSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n    addTodo(userId);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleFormSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"titleInput\">Title: </label>\n\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            id=\"titleInput\"\n            value={title}\n            onChange={(event) => {\n              setTitle(event.target.value);\n              setIsTitleEntered(true);\n            }}\n            placeholder=\"Enter a title\"\n          />\n\n          {!isTitleEntered && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelect\">User: </label>\n\n          <select\n            data-cy=\"userSelect\"\n            id=\"userSelect\"\n            value={userId}\n            onChange={(event) => {\n              setUserId(+event.target.value);\n              setIsUserSelected(true);\n            }}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option key={user.id} value={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {!isUserSelected && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={currentTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}